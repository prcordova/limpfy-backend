const Job = require("../models/job.model");
const User = require("../models/user.model");
const { getIO, getConnectedUsers } = require("../socket");
const path = require("path");
const fs = require("fs");

exports.createJob = async (req, res) => {
  try {
    const job = new Job({ ...req.body, clientId: req.user._id });
    await job.save();

    res.status(201).json({
      jobId: job._id,
      clientId: job.clientId,
      title: job.title,
      description: job.description,
      workerQuantity: job.workerQuantity,
      price: job.price,
      sizeGarbage: job.sizeGarbage,
      typeOfGarbage: job.typeOfGarbage,
      cleaningType: job.cleaningType,
      measurementUnit: job.measurementUnit,
      location: job.location,
    });
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
};

exports.cancelOrder = async (req, res) => {
  try {
    console.log(`Cancelling order with ID: ${req.params.id}`);
    const job = await Job.findById(req.params.id);
    if (!job) {
      return res.status(404).json({ message: "Trabalho n√£o encontrado" });
    }

    if (job.clientId.toString() !== req.user._id.toString()) {
      return res.status(403).json({
        message: "Voc√™ n√£o tem permiss√£o para cancelar este trabalho",
      });
    }

    job.status = "cancelled-by-client";
    await job.save();

    res.json(job);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: err.message });
  }
};

// //busca trabalhos do cliente
// exports.getClientJobs = async (req, res) => {
//   try {
//     // Popula workerId com fullName, avatars, ratings e m√©dia (averageRating)
//     // Voc√™ precisar√° criar um virtual ou pipeline de agrega√ß√£o para calcular averageRating,
//     // ou pr√©-calcular no momento da requisi√ß√£o.
//     // Por simplicidade, supondo que averageRating j√° exista ou seja calculado no momento da consulta:
//     const jobs = await Job.find({ clientId: req.user._id }).populate({
//       path: "workerId",
//       select: "fullName avatars ratings",
//     });

//     // Calcular averageRating do trabalhador aqui, se necess√°rio:
//     // Ou caso j√° esteja armazenado no banco, s√≥ retornar.
//     // Tamb√©m pegar √∫ltimos 3 coment√°rios j√° filtrados no front.

//     // Aqui voc√™ pode iterar sobre cada job e calcular averageRating se n√£o existir:
//     for (let j of jobs) {
//       if (j.workerId && j.workerId.ratings && j.workerId.ratings.length > 0) {
//         const sum = j.workerId.ratings.reduce((acc, r) => acc + r.rating, 0);
//         const avg = sum / j.workerId.ratings.length;
//         j.workerId.averageRating = avg;
//       } else if (j.workerId) {
//         j.workerId.averageRating = 0;
//       }
//     }

//     res.status(200).json(jobs);
//   } catch (err) {
//     res.status(500).json({ message: err.message });
//   }
// };

exports.getClientJobs = async (req, res) => {
  try {
    const jobs = await Job.find({ clientId: req.user._id }).populate(
      "workerId",
      "fullName avatars ratings"
    );

    // Calcular a m√©dia de avalia√ß√µes do trabalhador
    for (const job of jobs) {
      if (
        job.workerId &&
        job.workerId.ratings &&
        job.workerId.ratings.length > 0
      ) {
        const sum = job.workerId.ratings.reduce((acc, r) => acc + r.rating, 0);
        job.workerId.averageRating = sum / job.workerId.ratings.length;
        console.log("job.workerId.averageRating", job.workerId.averageRating);
      } else if (job.workerId) {
        job.workerId.averageRating = 0;
      }
    }

    res.status(200).json(jobs);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

//busca novos trabalhos na aba todos para trabalhador
exports.getJobs = async (req, res) => {
  try {
    const jobs = await Job.find({
      status: { $nin: ["in-progress", "cancelled-by-client"] },
    });
    res.json(jobs);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

//busca trabalho por id
exports.getJobById = async (req, res) => {
  try {
    const job = await Job.findById(req.params.id);
    if (!job) {
      return res.status(404).json({ message: "Trabalho n√£o encontrado" });
    }
    res.json(job);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

//busca trabalhos por id do cliente
exports.getJobsByUserId = async (req, res) => {
  try {
    const jobs = await Job.find({ clientId: req.params.userId });
    res.json(jobs);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

//atualiza trabalho
exports.updateJob = async (req, res) => {
  try {
    const job = await Job.findById(req.params.id);
    if (!job) {
      return res.status(404).json({ message: "Trabalho n√£o encontrado" });
    }

    if (job.clientId.toString() !== req.user._id.toString()) {
      return res.status(403).json({
        message: "Voc√™ n√£o tem permiss√£o para editar este trabalho",
      });
    }

    Object.assign(job, req.body);
    await job.save();

    res.json(job);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: err.message });
  }
};

//reativa trabalho
exports.reactivateJob = async (req, res) => {
  try {
    const job = await Job.findById(req.params.id);
    if (!job) {
      return res.status(404).json({ message: "Trabalho n√£o encontrado" });
    }

    if (job.clientId.toString() !== req.user._id.toString()) {
      return res.status(403).json({
        message: "Voc√™ n√£o tem permiss√£o para reativar este trabalho",
      });
    }

    job.status = "pending";
    await job.save();

    res.json(job);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: err.message });
  }
};

exports.completeOrder = async (req, res) => {
  try {
    const job = await Job.findById(req.params.id);
    if (!job) {
      return res.status(404).json({ message: "Trabalho n√£o encontrado" });
    }

    // Verifica se o usu√°rio logado √© o cliente
    if (job.clientId.toString() !== req.user._id.toString()) {
      return res.status(403).json({
        message: "Voc√™ n√£o tem permiss√£o para completar este pedido.",
      });
    }

    // Verifica se o status do job √© waiting-for-rating
    if (job.status !== "waiting-for-rating") {
      return res.status(400).json({
        message:
          "A conclus√£o s√≥ pode ser aceita se o trabalho estiver aguardando avalia√ß√£o.",
      });
    }

    // Marca o trabalho como conclu√≠do
    job.status = "completed";
    job.completedAt = new Date();
    // Caso haja l√≥gica de pagamento, liberar pagamento aqui:
    // job.paymentReleased = true;

    await job.save();

    // Opcional: enviar notifica√ß√£o via socket ou notifica√ß√£o para o trabalhador
    // ...

    res.json(job);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: err.message });
  }
};

// Worker endpoints

exports.acceptJob = async (req, res) => {
  try {
    const job = await Job.findById(req.params.id);
    if (!job) {
      return res.status(404).json({ message: "Trabalho n√£o encontrado" });
    }

    if (job.workerId) {
      return res
        .status(400)
        .json({ message: "Trabalho j√° aceito por outro trabalhador" });
    }

    job.workerId = req.user._id;
    job.status = "in-progress";

    if (!job.clientId) {
      return res
        .status(400)
        .json({ message: "Client ID n√£o encontrado no job" });
    }

    // Buscar o cliente no banco
    const client = await User.findById(job.clientId);
    if (!client) {
      return res.status(404).json({ message: "Cliente n√£o encontrado" });
    }

    const clientIdStr = job.clientId.toString();
    const users = getConnectedUsers();
    const socketId = users[clientIdStr];

    // Enviar notifica√ß√£o via Socket.IO se o cliente estiver conectado
    if (socketId) {
      const io = getIO();
      io.to(socketId).emit("jobAccepted", {
        message: `O trabalho "${job.title}" foi aceito e est√° em andamento.`,
      });
      console.log(
        `üì° Notifica√ß√£o enviada via socket para o cliente com ID: ${clientIdStr}`
      );
    } else {
      console.warn(`‚ö†Ô∏è Cliente ${clientIdStr} n√£o est√° conectado`);
    }

    // Adicionar notifica√ß√£o no documento do cliente
    client.notifications.push({
      message: `Seu trabalho "${job.title}" foi iniciado.`,
      jobId: job._id,
      workerId: job.workerId.toString(),
      type: "job", // Definindo o tipo de notifica√ß√£o
    });

    await client.save(); // Salvar as altera√ß√µes no cliente
    await job.save(); // Salvar as altera√ß√µes no job

    res.json(job);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: err.message });
  }
};

exports.cancelJob = async (req, res) => {
  try {
    console.log(`Cancelling job with ID: ${req.params.id}`);
    const job = await Job.findById(req.params.id);
    if (!job) {
      return res.status(404).json({ message: "Trabalho n√£o encontrado" });
    }

    job.workerId = null;
    job.status = "pending";
    await job.save();

    res.json(job);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: err.message });
  }
};

//Busca trabalhos do trabalhador
exports.getMyJobs = async (req, res) => {
  try {
    const jobs = await Job.find({ workerId: req.user._id }).populate(
      "clientId",
      "fullName"
    );

    res.json(jobs);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

//trabalho completo // Trabalhador concluindo trabalho :

exports.completeJob = async (req, res) => {
  console.log("Completing job with ID:", req.params.id);
  try {
    const job = await Job.findById(req.params.id);
    if (!job) {
      return res.status(404).json({ message: "Trabalho n√£o encontrado" });
    }

    // Verifica se o usu√°rio logado √© o trabalhador do job
    if (!job.workerId || job.workerId.toString() !== req.user._id.toString()) {
      return res
        .status(403)
        .json({
          message: "Voc√™ n√£o tem permiss√£o para concluir este trabalho",
        });
    }

    // Se j√° estiver conclu√≠do ou cancelado
    if (["completed", "cancelled-by-client"].includes(job.status)) {
      return res
        .status(400)
        .json({ message: "Trabalho j√° finalizado ou cancelado" });
    }

    let cleanedPhoto = null;
    if (req.file) {
      // Como o Multer (diskStorage) j√° salvou direto no destino,
      // s√≥ precisamos guardar o path relativo para exibir no front:
      // Se voc√™ definiu a pasta em:
      //   public/uploads/users/<workerId>/jobs/<jobId>/cleans
      // ent√£o a rota de acesso √© algo como:
      //   /uploads/users/<workerId>/jobs/<jobId>/cleans/<arquivo>
      const workerId = req.user._id.toString();
      const jobId = req.params.id;
      cleanedPhoto = `/uploads/users/${workerId}/jobs/${jobId}/cleans/${req.file.filename}`;
    }

    job.status = "completed";
    job.cleanedPhoto = cleanedPhoto;
    await job.save();

    return res.json(job);
  } catch (err) {
    console.error("Error completing job:", err);
    return res.status(500).json({ message: err.message });
  }
};

exports.openDispute = async (req, res) => {
  try {
    const job = await Job.findById(req.params.id);
    if (!job)
      return res.status(404).json({ message: "Trabalho n√£o encontrado" });

    // Apenas o cliente que criou o job pode abrir disputa
    if (job.clientId.toString() !== req.user._id.toString()) {
      return res.status(403).json({ message: "Permiss√£o negada" });
    }

    // Se o job n√£o estiver completed ou in-progress, n√£o faz sentido abrir disputa
    if (job.status !== "waiting-for-rating") {
      return res.status(400).json({
        message: "Somente trabalhos conclu√≠dos podem entrar em disputa",
      });
    }

    job.status = "dispute";
    job.disputeStatus = "open";
    job.disputeReason = req.body.reason || "Sem raz√£o fornecida";
    await job.save();

    // Notificar admin via socket (se desejar) ou via notifica√ß√£o
    // Exemplo: enviar notifica√ß√£o a um admin global - depende da sua l√≥gica.

    res.json(job);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: err.message });
  }
};

//ADMIN envia mensagem de disputa
exports.sendDisputeMessage = async (req, res) => {
  try {
    const job = await Job.findById(req.params.id);
    if (!job)
      return res.status(404).json({ message: "Trabalho n√£o encontrado" });

    if (job.status !== "dispute") {
      return res
        .status(400)
        .json({ message: "Este trabalho n√£o est√° em disputa." });
    }

    // Verifica o role do usu√°rio a partir de req.user.role
    // Apenas admin, cliente (job.clientId) ou trabalhador (job.workerId) podem enviar
    // Mas voc√™ pode restringir ainda mais se necess√°rio (por ex, se trabalhador n√£o pode enviar ap√≥s disputa aberta).
    let senderRole = req.user.role; // 'admin', 'client', 'worker'

    // Cliente s√≥ envia se job.clientId === req.user._id
    if (
      senderRole === "client" &&
      job.clientId.toString() !== req.user._id.toString()
    ) {
      return res.status(403).json({ message: "Permiss√£o negada" });
    }

    // Trabalhador s√≥ envia mensagem se assim for permitido pela l√≥gica (por ex, pode ser bloqueado na disputa)
    if (
      senderRole === "worker" &&
      job.workerId.toString() !== req.user._id.toString()
    ) {
      return res.status(403).json({ message: "Permiss√£o negada" });
    }

    // Admin pode sempre enviar, assumindo que req.user.role === 'admin'

    job.disputeMessages.push({
      senderId: req.user._id,
      senderRole: senderRole,
      message: req.body.message,
    });

    await job.save();

    // Enviar via socket.io para as partes envolvidas (cliente, trabalhador, admin) se desejado
    // ...

    res.json({ message: "Mensagem enviada", job });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: err.message });
  }
};

//resolve disputa
exports.resolveDispute = async (req, res) => {
  try {
    const job = await Job.findById(req.params.id);
    if (!job)
      return res.status(404).json({ message: "Trabalho n√£o encontrado" });

    // Verificar role admin
    if (req.user.role !== "admin") {
      return res
        .status(403)
        .json({ message: "Apenas admin pode resolver disputas" });
    }

    if (job.status !== "dispute" || job.disputeStatus !== "open") {
      return res.status(400).json({ message: "A disputa n√£o est√° aberta." });
    }

    // Decis√£o do admin: liberar pagamento ou n√£o
    // Suponha que req.body.action seja "release-payment" ou "refund-client"
    const action = req.body.action;
    if (!action) {
      return res.status(400).json({ message: "A√ß√£o n√£o fornecida." });
    }

    job.disputeStatus = "resolved";
    job.status = "completed";
    job.disputeResolvedAt = new Date();

    if (action === "release-payment") {
      job.paymentReleased = true;
      // L√≥gica de pagamento ao trabalhador...
    } else if (action === "refund-client") {
      job.paymentReleased = false;
      // L√≥gica de reembolso ao cliente...
    } else {
      return res.status(400).json({ message: "A√ß√£o inv√°lida." });
    }

    await job.save();

    // Notificar cliente e trabalhador do resultado via notifica√ß√£o e/ou socket
    // ...

    res.json({ message: "Disputa resolvida com sucesso.", job });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: err.message });
  }
};

//client rates job after completion
exports.rateJob = async (req, res) => {
  try {
    const jobId = req.params.id;
    const { rating, comment } = req.body;

    // Buscar o job
    const job = await Job.findById(jobId);
    if (!job) {
      return res.status(404).json({ message: "Trabalho n√£o encontrado" });
    }

    // Verificar se o usu√°rio logado √© o cliente
    if (job.clientId.toString() !== req.user._id.toString()) {
      return res.status(403).json({
        message: "Voc√™ n√£o tem permiss√£o para avaliar este trabalho.",
      });
    }

    // Verificar se j√° foi avaliado
    if (job.isRated) {
      return res
        .status(400)
        .json({ message: "Este trabalho j√° foi avaliado." });
    }

    // Validar nota
    const parsedRating = parseInt(rating, 10);
    if (isNaN(parsedRating) || parsedRating < 1 || parsedRating > 5) {
      return res
        .status(400)
        .json({ message: "A avalia√ß√£o deve ser um n√∫mero entre 1 e 5." });
    }

    // Buscar o trabalhador para gravar a avalia√ß√£o nele
    if (!job.workerId) {
      return res
        .status(400)
        .json({ message: "N√£o h√° um trabalhador associado a este trabalho." });
    }

    const worker = await User.findById(job.workerId);
    if (!worker) {
      return res.status(404).json({ message: "Trabalhador n√£o encontrado." });
    }

    // Adicionar a avalia√ß√£o ao trabalhador
    worker.ratings.push({
      jobId: job._id,
      rating: parsedRating,
      comment: comment || "",
      createdAt: new Date(),
    });

    await worker.save();

    // Atualizar o job para indicar que foi avaliado e completado
    job.status = "completed";

    // Marcar o job como avaliado
    job.isRated = true;
    await job.save();

    res.json({ message: "Avalia√ß√£o enviada com sucesso." });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: err.message });
  }
};
